#include <bits/stdc++.h>
#include "Lab1.cpp"

using namespace std;

long long gcd(long long a, long long b){
    if (a == 0) return b;
    return gcd(b % a, a);
}

long long lcm (long long a, long long b){
    long long res = b / gcd(a, b) * a;
    return res;
}

long long carmichael (long long p, long long q){
    return lcm(p - 1, q - 1);
}


pair <long long, long long> extended_euclid(long long a, long long b) {
    long long bs = b;
    long long x = 0, y = 1, lastx = 1, lasty = 0;
    while (b != 0) {
        long long temp, q;
        q = a / b;
        temp = a % b;
        a = b;
        b = temp;
        temp = x;
        x = lastx - q * x;
        lastx = temp;
        temp = y;
        y = lasty - q * y;
        lasty = temp;
    }
    if (lastx < 0) lastx += bs;
    return {lastx, lasty};
}

long long chinese_remainder_theorem(vector<long long> r, vector<long long> a) {
    long long prod = 1;
    for (int i = 0; i < a.size(); ++i) prod *= a[i];
    __int128_t res = 0;
    for (size_t i = 0; i < a.size(); ++i) {
        long long M = prod / a[i];
        long long N = extended_euclid(M, a[i]).first;
        res += M * N * r[i];
    }
    return res % prod;
}

class RSA{
    long long n, p, q, e, d, lambda;
    public:
      long long decrypt (long long message){
          long long exp1 = d % (p - 1);
          long long exp2 = d % (lambda / (p - 1));
          long long mp = binpow_mod(message % p, exp1, p);
          long long mq = binpow_mod(message % q, exp2, q);
          vector <long long> r = {mp, mq};
          vector <long long> a = {p, q};
          return chinese_remainder_theorem(r, a);
      }

      long long encrypt (long long message){
          return binpow_mod(message, e, n);
      }
      RSA(int bits){

      }
};

int main(){
//    pair<long long, long long> res = extendedEuclid(99, 71);
//    cout << res.first << ' ' << res.second << '\n';
    vector <long long> v = {2, 4, 5};
    vector <long long> p = {3, 5, 7};
    cout << chinese_remainder_theorem(v, p);
    return 0;
}
